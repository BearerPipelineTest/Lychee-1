<?php

namespace App\Http\Controllers;

use App\Actions\Album\Archive;
use App\Actions\Album\Create;
use App\Actions\Album\CreateTagAlbum;
use App\Actions\Album\Delete;
use App\Actions\Album\Merge;
use App\Actions\Album\Move;
use App\Actions\Album\PositionData;
use App\Actions\Album\SetCover;
use App\Actions\Album\SetDescription;
use App\Actions\Album\SetLicense;
use App\Actions\Album\SetNSFW;
use App\Actions\Album\SetPublic;
use App\Actions\Album\SetShowTags;
use App\Actions\Album\SetSorting;
use App\Actions\Album\SetTitle;
use App\Actions\Album\Unlock;
use App\Contracts\AbstractAlbum;
use App\Contracts\LycheeException;
use App\Factories\AlbumFactory;
use App\Http\Requests\Album\AddAlbumRequest;
use App\Http\Requests\Album\AddTagAlbumRequest;
use App\Http\Requests\Album\ArchiveAlbumsRequest;
use App\Http\Requests\Album\DeleteAlbumsRequest;
use App\Http\Requests\Album\GetAlbumPositionDataRequest;
use App\Http\Requests\Album\GetAlbumRequest;
use App\Http\Requests\Album\MoveAlbumsRequest;
use App\Http\Requests\Album\SetAlbumCoverRequest;
use App\Http\Requests\Album\SetAlbumDescriptionRequest;
use App\Http\Requests\Album\SetAlbumLicenseRequest;
use App\Http\Requests\Album\SetAlbumNSFWRequest;
use App\Http\Requests\Album\SetAlbumSharingRequest;
use App\Http\Requests\Album\SetAlbumSortingRequest;
use App\Http\Requests\Album\SetAlbumsTitleRequest;
use App\Http\Requests\Album\SetAlbumTagsRequest;
use App\Http\Requests\Album\UnlockAlbumRequest;
use App\Models\Album;
use App\Models\TagAlbum;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Routing\Controller;
use Symfony\Component\HttpFoundation\StreamedResponse;

class AlbumController extends Controller
{
	/**
	 * Add a new Album.
	 *
	 * @param AddAlbumRequest $request
	 * @param Create          $create
	 *
	 * @return Album
	 *
	 * @throws LycheeException
	 */
	public function add(AddAlbumRequest $request, Create $create): Album
	{
		return $create->create($request->title(), $request->parentID());
	}

	/**
	 * Add a new album generated by tags.
	 *
	 * @param AddTagAlbumRequest $request
	 * @param CreateTagAlbum     $create
	 *
	 * @return TagAlbum
	 *
	 * @throws LycheeException
	 */
	public function addTagAlbum(AddTagAlbumRequest $request, CreateTagAlbum $create): TagAlbum
	{
		return $create->create($request->title(), $request->tags());
	}

	/**
	 * Provided an albumID, returns the album.
	 *
	 * @param GetAlbumRequest $request
	 * @param AlbumFactory    $albumFactory
	 *
	 * @return AbstractAlbum
	 *
	 * @throws LycheeException
	 * @throws ModelNotFoundException
	 */
	public function get(GetAlbumRequest $request, AlbumFactory $albumFactory): AbstractAlbum
	{
		return $albumFactory->findOrFail($request->albumID());
	}

	/**
	 * Provided an albumID, returns the album with only map related data.
	 *
	 * @param GetAlbumPositionDataRequest $request
	 * @param PositionData                $positionData
	 *
	 * @return array
	 *
	 * @throws ModelNotFoundException
	 * @throws LycheeException
	 */
	public function getPositionData(GetAlbumPositionDataRequest $request, PositionData $positionData): array
	{
		return $positionData->get($request->albumID(), $request->includeSubAlbums());
	}

	/**
	 * Provided the albumID and password, return whether the album can be accessed or not.
	 *
	 * @param UnlockAlbumRequest $request
	 * @param Unlock             $unlock
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 * @throws LycheeException
	 */
	public function unlock(UnlockAlbumRequest $request, Unlock $unlock): void
	{
		$unlock->do($request->albumID(), $request->password());
	}

	/**
	 * Provided a title and albumIDs, change the title of the albums.
	 *
	 * @param SetAlbumsTitleRequest $request
	 * @param SetTitle              $setTitle
	 *
	 * @return void
	 *
	 * @throws LycheeException
	 */
	public function setTitle(SetAlbumsTitleRequest $request, SetTitle $setTitle): void
	{
		$setTitle->do($request->albumIDs(), $request->title());
	}

	/**
	 * Change the sharing properties of the album.
	 *
	 * @param SetAlbumSharingRequest $request
	 * @param SetPublic              $setPublic
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 * @throws LycheeException
	 */
	public function setPublic(SetAlbumSharingRequest $request, SetPublic $setPublic): void
	{
		$setPublic->do($request->albumID(), $request->shareSettings());
	}

	/**
	 * Change the description of the album.
	 *
	 * @param SetAlbumDescriptionRequest $request
	 * @param SetDescription             $setDescription
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 */
	public function setDescription(SetAlbumDescriptionRequest $request, SetDescription $setDescription): void
	{
		$setDescription->do($request->albumID(), $request->description());
	}

	/**
	 * Change show tags of the tag album.
	 *
	 * @param SetAlbumTagsRequest $request
	 * @param SetShowTags         $setShowTags
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 */
	public function setShowTags(SetAlbumTagsRequest $request, SetShowTags $setShowTags): void
	{
		$tags = $request->tags();
		$str = sizeof($tags) === 0 ? null : implode(',', $request->tags());
		$setShowTags->do($request->albumID(), $str);
	}

	/**
	 * Set cover image of the album.
	 *
	 * @param SetAlbumCoverRequest $request
	 * @param SetCover             $setCover
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 */
	public function setCover(SetAlbumCoverRequest $request, SetCover $setCover): void
	{
		$setCover->do($request->albumID(), $request->photoID());
	}

	/**
	 * Set the license of the Album.
	 *
	 * @param SetAlbumLicenseRequest $request
	 * @param SetLicense             $setLicense
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 */
	public function setLicense(SetAlbumLicenseRequest $request, SetLicense $setLicense): void
	{
		$setLicense->do($request->albumID(), $request->license());
	}

	/**
	 * Delete the album and all of its pictures.
	 *
	 * @param DeleteAlbumsRequest $request
	 * @param Delete              $delete
	 *
	 * @return void
	 *
	 * @throws LycheeException
	 */
	public function delete(DeleteAlbumsRequest $request, Delete $delete): void
	{
		$delete->do($request->albumIDs());
	}

	/**
	 * Merge albums. The first of the list is the destination of the merge.
	 *
	 * @param MoveAlbumsRequest $request
	 * @param Merge             $merge
	 *
	 * @return void
	 *
	 * @throws LycheeException
	 * @throws ModelNotFoundException
	 */
	public function merge(MoveAlbumsRequest $request, Merge $merge): void
	{
		$merge->do($request->albumID(), $request->albumIDs());
	}

	/**
	 * Move multiple albums into another album.
	 *
	 * @param MoveAlbumsRequest $request
	 * @param Move              $move
	 *
	 * @return void
	 *
	 * @throws LycheeException
	 * @throws ModelNotFoundException
	 */
	public function move(MoveAlbumsRequest $request, Move $move): void
	{
		$move->do($request->albumID(), $request->albumIDs());
	}

	/**
	 * Set if an album contains sensitive pictures.
	 *
	 * @param SetAlbumNSFWRequest $request
	 * @param SetNSFW             $setNSFW
	 *
	 * @return void
	 *
	 * @throws ModelNotFoundException
	 */
	public function setNSFW(SetAlbumNSFWRequest $request, SetNSFW $setNSFW): void
	{
		$setNSFW->do($request->albumID(), true);
	}

	/**
	 * Define the default sorting type.
	 *
	 * @param SetAlbumSortingRequest $request
	 * @param SetSorting             $setSorting
	 *
	 * @return void
	 *
	 * @throws LycheeException
	 * @throws ModelNotFoundException
	 */
	public function setSorting(SetAlbumSortingRequest $request, SetSorting $setSorting): void
	{
		$setSorting->do($request->albumID(), $request->sortingColumn(), $request->sortingOrder());
	}

	/**
	 * Return the archive of the pictures of the album and its sub-albums.
	 *
	 * @param ArchiveAlbumsRequest $request
	 * @param Archive              $archive
	 *
	 * @return StreamedResponse
	 *
	 * @throws LycheeException
	 */
	public function getArchive(ArchiveAlbumsRequest $request, Archive $archive): StreamedResponse
	{
		return $archive->do($request->albumIDs());
	}
}
